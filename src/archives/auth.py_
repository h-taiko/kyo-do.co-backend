# coding: UTF-8
from __future__ import print_function

import boto3
import json,logging
from boto3.dynamodb.conditions import Key, Attr
import uuid, hashlib #token生成向け

logger = logging.getLogger()
logger.setLevel(logging.INFO)

logger.info('Loading function')

#LambdaFunctionのエントリポイント
def lambda_handler(event, context):

    if event["httpMethod"] == "POST":
        return post(event, context)
    else :
        return respond("400",'{"message":"not expected method"}') 
        
#PostメソッドでサービスをCallされた際の挙動
def post(event, context) :

    logger.info("Received event: " + json.dumps(event, indent=2))
    logger.info(event)
    
    logger.info(event["body"])
    body_object = json.loads(event["body"])
    logger.info("取得したユーザIDは" + body_object["userid"])

    #与えられたユーザ情報か？    
    items = get_daynamo_item('user','userid',body_object["userid"]  ) 
    
    if "Item" not in items :
        return respond("400",'{"message":"invalid user"}') #ユーザIDが存在しない場合にエラーを返す
    
    logger.info("取得したパスワード" + str(items["Item"]["password"]))
    
    if items["Item"]["password"] == body_object["password"] : #DBパスワードと送付パスワードが一致した場合
        token = hashlib.md5( str(uuid.uuid4()) ).hexdigest() #token生成とりあえずは、MD5で良いか・・・
        update_dynamo_item('user', 'userid', body_object["userid"], 'currenttoken',  token )
        return respond("200",'{"token": "' + token + '"}')
    else :
        return respond("400",'{"message":"passwords do not match"}') 





        
        
#汎用リターン Lambda統合Proxyの場合、この形式のreturnしか受け付けない
def respond(statusCode, res=None):
    return {
        'statusCode': statusCode,
        'body': json.dumps(res),
        'headers': {
            'Content-Type': 'application/json',
        },
    }


#汎用データ取得
def get_daynamo_item(table_name, keyName, KeyValue  ):
    return boto3.resource('dynamodb').Table(table_name).get_item(
            Key={
                 keyName: KeyValue
            }
        )

#汎用レコード Update
def update_dynamo_item(table_name, keyName, keyValue, AttributeName, AttributeValue):
    boto3.resource('dynamodb').Table(table_name).update_item(
                Key = {
                     keyName : keyValue
                },
                AttributeUpdates = {
                     AttributeName:{
                         'Action': 'PUT',
                         'Value': AttributeValue
                     }
                }
    )    